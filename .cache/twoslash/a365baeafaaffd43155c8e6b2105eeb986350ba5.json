{"code":"import visit from 'unist-util-visit';\nexport default function plugin(options) {\n  return transform;\n  function transform(node: Node, options: any) {\n    visit(node, 'code', visitor);\n    return node;\n  }\n}\nfunction visitor(node: RichNode) {\n  if (!node.lang) {\n    return;\n  }\n  // run typecheck by default and use ```ts ignore to explicitly ignore\n  const isTypescript = node.lang === 'ts' || node.lang === 'tsx';\n  const disableTypecheck = node.meta?.includes('ignore');\n  if (disableTypecheck || !isTypescript) {\n    // only highlight\n  }\n  // typecheck, then highlight\n}","extension":"ts","highlights":[],"queries":[],"staticQuickInfos":[{"text":"(alias) namespace visit\n(alias) const visit: {\n    <V extends Node<Data>>(tree: Node<Data>, test: any[] | Test<V>, visitor: Visitor<V>, reverse?: boolean | undefined): void;\n    (tree: Node<Data>, visitor: Visitor<...>, reverse?: boolean | undefined): void;\n    CONTINUE: true;\n    SKIP: \"skip\";\n    EXIT: false;\n}\nimport visit","docs":"","start":7,"length":5,"line":0,"character":7,"targetString":"visit"},{"text":"function plugin(options: any): (node: Node, options: any) => Node","docs":"","start":62,"length":6,"line":1,"character":24,"targetString":"plugin"},{"text":"(parameter) options: any","docs":"","start":69,"length":7,"line":1,"character":31,"targetString":"options"},{"text":"(local function) transform(node: Node, options: any): Node","docs":"","start":89,"length":9,"line":2,"character":9,"targetString":"transform"},{"text":"(local function) transform(node: Node, options: any): Node","docs":"","start":111,"length":9,"line":3,"character":11,"targetString":"transform"},{"text":"(parameter) node: Node","docs":"","start":121,"length":4,"line":3,"character":21,"targetString":"node"},{"text":"interface Node","docs":"Node is an interface from which a number of DOM API object types inherit. It allows those types to be treated similarly; for example, inheriting the same set of methods, or being tested in the same way.","start":127,"length":4,"line":3,"character":27,"targetString":"Node"},{"text":"(parameter) options: any","docs":"","start":133,"length":7,"line":3,"character":33,"targetString":"options"},{"text":"(alias) visit<any>(tree: Node<Data>, test: any, visitor: visit.Visitor<any>, reverse?: boolean | undefined): void (+1 overload)\nimport visit","docs":"Visit children of tree which pass a test","start":153,"length":5,"line":4,"character":4,"targetString":"visit"},{"text":"(parameter) node: Node","docs":"","start":159,"length":4,"line":4,"character":10,"targetString":"node"},{"text":"function visitor(node: any): void","docs":"","start":173,"length":7,"line":4,"character":24,"targetString":"visitor"},{"text":"(parameter) node: Node","docs":"","start":194,"length":4,"line":5,"character":11,"targetString":"node"},{"text":"function visitor(node: any): void","docs":"","start":215,"length":7,"line":8,"character":9,"targetString":"visitor"},{"text":"(parameter) node: any","docs":"","start":223,"length":4,"line":8,"character":17,"targetString":"node"},{"text":"any","start":229,"length":8,"line":8,"character":23,"targetString":"RichNode"},{"text":"(parameter) node: any","docs":"","start":248,"length":4,"line":9,"character":7,"targetString":"node"},{"text":"any","start":253,"length":4,"line":9,"character":12,"targetString":"lang"},{"text":"const isTypescript: boolean","docs":"","start":357,"length":12,"line":13,"character":8,"targetString":"isTypescript"},{"text":"(parameter) node: any","docs":"","start":372,"length":4,"line":13,"character":23,"targetString":"node"},{"text":"any","start":377,"length":4,"line":13,"character":28,"targetString":"lang"},{"text":"(parameter) node: any","docs":"","start":394,"length":4,"line":13,"character":45,"targetString":"node"},{"text":"any","start":399,"length":4,"line":13,"character":50,"targetString":"lang"},{"text":"const disableTypecheck: any","docs":"","start":423,"length":16,"line":14,"character":8,"targetString":"disableTypecheck"},{"text":"(parameter) node: any","docs":"","start":442,"length":4,"line":14,"character":27,"targetString":"node"},{"text":"any","start":447,"length":4,"line":14,"character":32,"targetString":"meta"},{"text":"any","start":453,"length":8,"line":14,"character":38,"targetString":"includes"},{"text":"const disableTypecheck: any","docs":"","start":479,"length":16,"line":15,"character":6,"targetString":"disableTypecheck"},{"text":"const isTypescript: boolean","docs":"","start":500,"length":12,"line":15,"character":27,"targetString":"isTypescript"}],"errors":[{"category":1,"code":7006,"length":7,"start":69,"line":1,"character":31,"renderedMessage":"Parameter 'options' implicitly has an 'any' type.","id":"err-7006-69-7"},{"category":1,"code":2769,"length":4,"start":159,"line":4,"character":10,"renderedMessage":"No overload matches this call.\n  Overload 1 of 2, '(tree: Node<Data>, test: any, visitor: Visitor<any>, reverse?: boolean | undefined): void', gave the following error.\n    Argument of type 'Node' is not assignable to parameter of type 'Node<Data>'.\n      Property 'type' is missing in type 'Node' but required in type 'Node<Data>'.\n  Overload 2 of 2, '(tree: Node<Data>, visitor: Visitor<Node<Data>>, reverse?: boolean | undefined): void', gave the following error.\n    Argument of type 'Node' is not assignable to parameter of type 'Node<Data>'.","id":"err-2769-159-4"},{"category":1,"code":2304,"length":8,"start":229,"line":8,"character":23,"renderedMessage":"Cannot find name 'RichNode'.","id":"err-2304-229-8"}],"playgroundURL":"https://www.typescriptlang.org/play/#code/PTAEAEFMCdoe2gZwFygOwAYMDZQCY1sBOfAZgwBYAoASwFsAHBAF1ADcbEbWAzeO0AHIArgDtOzALTDmNADaSOXZoIDcVSAA8m0VgBNIPAIbC5vMQGNZcUaAZzhAcxqiAFHAbXRiAJSgA3lSgoNCQzMLQtszQRt48CHTqwTyWXqDRsYjx0HSuonAGqAByBZAANKAeXiigsQCefoHBwUrceaUVghalghWtzAg+Sc2h4ZGg+QbDAL5UsymiVjQ27JzcCO2FoABKNBYAFiUGjUGgNDygrgCEk5AAdHKxjifNIWERojOnICFi6XUMSAHIEAa1AACM6qADMZTKxYnpQMJEJBQAADDHMRBnRz5ULpOCgLT2PbcORQmi4hCQU7dbysTgAFQBkEQFmgNE8oAAvBNSg8njzubzBFjBKAAD4SvkGAWiRxCkVYzRqWk2RD6ThGcFySDMwHAixg3m3O50MJGAD8dxcFgcBkQrkElLxkEEQ1O50uei1Or1LMNYKloCuTJZbI5nhezR+NnJoH2lP2ciTzFOs2CP2YAf2oIqzFztkTjmTqbmQA","tags":[]}